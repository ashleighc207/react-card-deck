{"version":3,"sources":["Components/Card.js","Components/Board.js","App.js","index.js"],"names":["Card","className","alt","this","props","src","image","style","transform","x","y","rotate","Component","Board","state","deck","id","remainingCards","getNewCard","bind","axios","get","then","response","setState","data","deck_id","evt","preventDefault","url","remaining","err","Error","name","imageUrl","cards","cardId","code","altTxt","value","suit","Math","floor","random","newCard","img","altText","prevState","console","log","alert","onClick","map","card","key","App","ReactDOM","render","document","getElementById"],"mappings":"yXAkBeA,G,6LAbX,OACE,yBACEC,UAAU,OACVC,IAAKC,KAAKC,MAAMF,IAChBG,IAAKF,KAAKC,MAAME,MAChBC,MAAO,CACLC,UAAU,cAAD,OAAgBL,KAAKC,MAAMK,EAA3B,0BAA8CN,KAAKC,MAAMM,EAAzD,sBAAwEP,KAAKC,MAAMO,OAAnF,e,GARAC,c,gBC2FJC,E,YAxFb,WAAYT,GAAQ,IAAD,8BACjB,4CAAMA,KACDU,MAAQ,CACXC,KAAM,GACNC,GAAI,GACJC,eAAgB,IAElB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAPD,E,iFASE,IAAD,OAElBC,IAAMC,IADM,oDACGC,MAAK,SAAAC,GAClB,EAAKC,SAAS,CAAER,GAAIO,EAASE,KAAKC,e,0EAGrBC,G,qFACfA,EAAIC,iBACEC,E,8CAA6C1B,KAAKW,MAAME,G,4BAEtDI,IAAMC,IAAIQ,GAAKP,MAAK,SAAAC,GACxB,GAAgC,IAA5BA,EAASE,KAAKK,UAAiB,CACjC,IAAIC,EAAM,IAAIC,MAAM,uBAEpB,MADAD,EAAIE,KAAO,mBACLF,EAER,IAGEpB,EAHEuB,EAAWX,EAASE,KAAKU,MAAM,GAAG7B,MACpC8B,EAASb,EAASE,KAAKU,MAAM,GAAGE,KAChCC,EAAM,UAAMf,EAASE,KAAKU,MAAM,GAAGI,MAA7B,YAAsChB,EAASE,KAAKU,MAAM,GAAGK,MAGnE7B,EADE8B,KAAKC,MAAM,IAAMD,KAAKE,WAAa,GACZ,GAAhBF,KAAKE,SAAgB,EAExB,WAAuB,GAAhBF,KAAKE,SAAgB,GAEpC,IAEIC,EAAU,CACZC,IAAKX,EACLzB,EAJMgC,KAAKC,MAAM,GAAKD,KAAKE,UAK3BjC,EAJM+B,KAAKC,MAAM,GAAKD,KAAKE,UAK3BhC,OAAQA,EACRK,GAAIoB,EACJU,QAASR,GAEX,EAAKd,UAAS,SAAAuB,GACZ,MAAO,CACLhC,KAAK,GAAD,mBAAM,EAAKD,MAAMC,MAAjB,CAAuB6B,IAC3B3B,eAAgBM,EAASE,KAAKK,iB,uDAKpCkB,QAAQC,IAAR,KAAiB,KAAIhB,MACJ,qBAAb,KAAIA,OACN9B,KAAKqB,SAAS,CAAEP,eAAgB,IAChCiC,MAAM,EAAD,K,+IAMT,OACE,yBAAKjD,UAAU,SACb,6BACE,4BAAQA,UAAU,gBAAgBkD,QAAShD,KAAKe,YAAhD,cAGA,uBAAGjB,UAAU,eAAb,eAAwCE,KAAKW,MAAMG,iBAErD,yBAAKhB,UAAU,yBACZE,KAAKW,MAAMC,KAAKqC,KAAI,SAAAC,GACnB,OACE,kBAAC,EAAD,CACE/C,MAAO+C,EAAKR,IACZpC,EAAG4C,EAAK5C,EACRE,OAAQ0C,EAAK1C,OACbD,EAAG2C,EAAK3C,EACR4C,IAAKD,EAAKrC,GACVd,IAAKmD,EAAKP,mB,GA/ENlC,aCOL2C,MARf,WACE,OACE,yBAAKtD,UAAU,OACb,kBAAC,EAAD,QCFNuD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c697190b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Card.css\";\n\nclass Card extends Component {\n  render() {\n    return (\n      <img\n        className=\"Card\"\n        alt={this.props.alt}\n        src={this.props.image}\n        style={{\n          transform: `translateX(${this.props.x}px) translateY(${this.props.y}px) rotate(${this.props.rotate}deg)`\n        }}\n      />\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport \"./Board.css\";\nimport Card from \"./Card.js\";\nimport axios from \"axios\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: [],\n      id: \"\",\n      remainingCards: 52\n    };\n    this.getNewCard = this.getNewCard.bind(this);\n  }\n  componentDidMount() {\n    const url = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n    axios.get(url).then(response => {\n      this.setState({ id: response.data.deck_id });\n    });\n  }\n  async getNewCard(evt) {\n    evt.preventDefault();\n    const url = `https://deckofcardsapi.com/api/deck/${this.state.id}/draw/`;\n    try {\n      await axios.get(url).then(response => {\n        if (response.data.remaining === 0) {\n          let err = new Error(\"No cards remaining!\");\n          err.name = \"Nothing Returned\";\n          throw err;\n        }\n        let imageUrl = response.data.cards[0].image,\n          cardId = response.data.cards[0].code,\n          altTxt = `${response.data.cards[0].value} ${response.data.cards[0].suit}`,\n          rotate;\n        if (Math.floor(100 * Math.random()) <= 50) {\n          rotate = Math.random() * 30 - 5;\n        } else {\n          rotate = `-${Math.random() * 30 - 5}`;\n        }\n        let x = Math.floor(50 * Math.random());\n        let y = Math.floor(50 * Math.random());\n        let newCard = {\n          img: imageUrl,\n          x: x,\n          y: y,\n          rotate: rotate,\n          id: cardId,\n          altText: altTxt\n        };\n        this.setState(prevState => {\n          return {\n            deck: [...this.state.deck, newCard],\n            remainingCards: response.data.remaining\n          };\n        });\n      });\n    } catch (err) {\n      console.log(err, err.name);\n      if (err.name === \"Nothing Returned\") {\n        this.setState({ remainingCards: 0 });\n        alert(err);\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Board\">\n        <div>\n          <button className=\"Board--button\" onClick={this.getNewCard}>\n            Get a Card\n          </button>\n          <p className=\"Board--text\">Cards left: {this.state.remainingCards}</p>\n        </div>\n        <div className=\"Board--card_container\">\n          {this.state.deck.map(card => {\n            return (\n              <Card\n                image={card.img}\n                x={card.x}\n                rotate={card.rotate}\n                y={card.y}\n                key={card.id}\n                alt={card.altText}\n              />\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\nimport \"./App.css\";\nimport Board from \"./Components/Board.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}